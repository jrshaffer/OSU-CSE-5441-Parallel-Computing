// Use "gcc -O3 -fopenmp" to compile with GNU gcc
// Use "icc -O3 -fopenmp" to compile with Intel icc
#include <omp.h>
#include <unistd.h>
#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#define Niter (10)
#define N (4096)
#define threshold (0.00000001)
#define blocksize (8)
#define PAPI_ERROR_CHECK(X) \
	if((X)!=PAPI_OK) fprintf(stderr,"PAPI Error \n");

void compare(int n, double wref[n], double w[n]);
double m[N][N], x[N], y[N], z[N], yy[N], zz[N];;

int main(int argc, char *argv[]){
  int nThreads;
  double rtclock(void);
  double clkbegin, clkend;
  double t1,t2;

  int i,j,t;

  if ( argc != 2 ) {
    printf("Number of threads not specified\n");
    exit(-1);
  }
  nThreads = atoi(argv[1]);
  if ( nThreads <= 0 ) {
    printf("Num threads <= 0\n");
    exit(-1);
  }
  printf("Num threads = %d\n", nThreads );
  omp_set_num_threads(nThreads);
  printf("Matrix Size = %d\n",N);

  for(i=0;i<N;i++)
  { 
    x[i] = 1.0/(i+1);
    y[i] = z[i] = 0.0;
    for(j=0;j<N;j++) m[i][j] = rand();
  }

  t1 = rtclock();
  for(t=0;t<Niter;t++)
  {  for(i=0;i<N;i++)
      for(j=0;j<N;j++)
      {
       y[j] = y[j] + m[i][j]*x[i];
       z[j] = z[j] + m[j][i]*x[i];
      }
     for (i=0; i<N; i++) x[i] += 1e-8;
  }
  t2 = rtclock();
  printf("Base version: %.2f GFLOPs; Time = %.2f\n",4.0e-9*Niter*N*N/(t2-t1),t2-t1);

  for(i=0;i<N;i++) 
  { x[i] = 1.0/(i+1);
    yy[i] = y[i]; zz[i] = z[i];
    y[i] = z[i] = 0.0;
  }

  // Verson to be parallelized and optimized
  // You can use any valid loop transformation before
  // OpenMP parallelization

  omp_set_num_threads(nThreads);
  t1 = rtclock();
  int it, jt;
#pragma omp parallel 
{
#pragma omp master 
  for(t=0;t<Niter;t++) {	
	for (it = 0; it < N; it += blocksize) {
		for (jt = 0; jt < N; jt += blocksize) {
			for(i=0;i<it + blocksize; i+=4) {
     				for(j=0;j<jt + blocksize;j++) {
					printf("wait");
       					y[j] = y[j] + m[i][j]*x[i];
					y[j] = y[j] + m[i+1][j] * x[i+1];
					y[j] = y[j] + m[i+2][j] * x[i+2];
					y[j] = y[j] + m[i+3][j] * x[i+3];
	       				
					z[j] = z[j] + m[j][i]*x[i];
					z[j] = z[j] + m[j][i+1] * x[i+1];
					z[j] = z[j] + m[j][i+2] * x[i+2];
					z[j] = z[j] + m[j][i+3] * x[i+3];
				}
			}
		}
	
     	}
     for (i=0; i<N; i++) x[i] += 1e-8;
  }
}
  t2 = rtclock();
  printf("Base version: %.2f GFLOPs; Time = %.2f\n",4.0e-9*Niter*N*N/(t2-t1),t2-t1);
  printf("Comparing y: "); compare(N,yy,y);
  printf("Comparing z: "); compare(N,zz,z);

}
double rtclock(void)
{
  struct timezone Tzp;
  struct timeval Tp;
  int stat;
  stat = gettimeofday (&Tp, &Tzp);
  if (stat != 0) printf("Error return from gettimeofday: %d",stat);
  return(Tp.tv_sec + Tp.tv_usec*1.0e-6);
}

void compare(int n, double wref[n], double w[n])
{
  double maxdiff,this_diff;
  int numdiffs;
  int i,j;
  numdiffs = 0;
  maxdiff = 0;
  for (i=0;i<n;i++)
      {
	this_diff = wref[i]-w[i];
	if (this_diff < 0) this_diff = -1.0*this_diff;
	if (this_diff>threshold)
	  { numdiffs++;
	    if (this_diff > maxdiff) maxdiff=this_diff;
	  }
      }
  if (numdiffs > 0)
    printf("%d Diffs found over threshold %f; Max Diff = %f\n",
	   numdiffs,threshold,maxdiff);
  else
    printf("Passed Correctness Check\n");
}

